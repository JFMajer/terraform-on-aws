name: Deploy ASG with ALB

on:
  workflow_dispatch:
    inputs:
      destruction:
        type: boolean
        description: 'Destroy the ASG?'
        required: false
        default: false
  push:
    branches:
      - main
    paths:
      - '**/asg/**'
      - '!**/README.md'
      - '**/asg.yml'
      - '**/destroy.txt'
      - 'modules/**'
  
jobs:
  deploy-asg:
    permissions:
      id-token: write
      contents: read
    environment: dev
    env:
      WORKING_DIR: asg
    runs-on: ubuntu-latest
    steps:
      - run: echo "üéâ The job was triggered by a ${{ github.event_name }} event."
      - run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - run: echo "üí° The ${{ github.repository }} repository is being cloned to the runner."
      - uses: actions/checkout@v3
      - name: list files
        run: ls -la
      - uses: hashicorp/setup-terraform@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ secrets.AWS_ROLE_SESSION_NAME }}
          aws-region: ${{ vars.AWS_REGION }}
      - uses: cschleiden/replace-tokens@v1
        with:
          files: '["**/*.tf"]'
        env:
          S3_BUCKET: ${{ secrets.S3_BUCKET }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          DYNAMO_TABLE: ${{ secrets.DYNAMO_TABLE }}
          ENV: ${{ vars.ENV }}
          RDS_USER: ${{ secrets.RDS_USER }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
      - name: Terraform Init
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform init
      - name: Terraform Plan
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform plan -out=plan.out
      - name: Terraform Apply
        if: ${{ !contains(github.event.head_commit.message, 'Destroy') }} || ${{ github.event.inputs.destruction }}
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform apply plan.out
      - name: Terraform Destroy
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform destroy -auto-approve
        if: ${{ contains(github.event.head_commit.message, 'Destroy') || github.event.inputs.destruction }}
      - name: Terraform Output
        working-directory: ${{ env.WORKING_DIR }}
        run: terraform output -json  
  show_debug_info:
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ toJSON(github.event) }}"
      - run: echo ${{ github.workspace }}
        if: ${{ github.event.inputs.destruction }}
